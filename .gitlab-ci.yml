---
stages:
  - lint
  - test
  - docker

golangci-lint:
  stage: lint
  image: golangci/golangci-lint
  script:
    - golangci-lint run

test:
  stage: test
  image: golang
  script:
    - go test -v ./...

lab:
  stage: test
  image: golang
  variables:
    name: domain.tld
  before_script:
    - apt-get update
    - apt-get install -y jq curl openssl
  script:
    - set -e
    - go run main.go gen --ca -o test -n $name
    - go run main.go server -c test/inca.yml &!
    - sleep 3
    - curl 127.0.0.1:8080/ca/local | openssl x509 -text
    - curl 127.0.0.1:8080/test.$name | openssl x509 -text
    - test -f test/test.$name/crt.pem
    - curl 127.0.0.1:8080 | jq -r '.results|length' | grep 1
    - curl 127.0.0.1:8080/test.$name/key
    - curl 127.0.0.1:8080/test.$name/show | jq
    - curl -X DELETE 127.0.0.1:8080/test.$name
    - test -f test/test.$name/crt.pem && exit 1 || echo -n
    - kill %1

docker:
  stage: docker
  script:
    - echo Building dockerfile as $CI_REGISTRY_IMAGE:${CI_COMMIT_TAG:=${CI_COMMIT_SHORT_SHA:=${CI_COMMIT_SHA:0:8}}}
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY_IMAGE
    - docker build --pull -t $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG -t $CI_REGISTRY_IMAGE:latest .
    - docker push -a $CI_REGISTRY_IMAGE
  tags:
    - docker
  only:
    refs:
      - tags
      - master
